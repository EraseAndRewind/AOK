import java.io.BufferedReader;

import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Iterator;

public class Instructions1 {

    static char registers[][];

    
    
    
    public static boolean CHECK (int a, int b,int num){
    	
    	
    	/*StringBuilder sb1 = new StringBuilder();
    	StringBuilder sb2 = new StringBuilder();
    	for(int i = 0; i< 16; i++){
    		sb1.append(registers[a][i]);
    		sb2.append(registers[b][i]);
    	}*/
    	
    	return false;
    	/*if(num == 1)
    	if(Integer.parseInt(sb1.toString()) > Integer.parseInt(sb2.toString()) )
    		return true;
    	else if (num == 2)
    	if(Integer.parseInt(sb1.toString()) >= Integer.parseInt(sb2.toString()) )
    		return true;
    	else if (num == 3 )
    	if(Integer.parseInt(sb1.toString()) < Integer.parseInt(sb2.toString()) )
    		return true;
    	else if (num == 4)
    	if(Integer.parseInt(sb1.toString()) <= Integer.parseInt(sb2.toString()) )
    		return true;
    	
    	
    	return false;*/
    }

    public static int convert (String a)
    {
    	return Integer.parseInt(a,2);  	 
    }

    public static void MVI(int reg, String value) {
        // vasiot kod ovde
    	/*System.out.println("MVI");*/
    	for(int i=0 ; i < value.length(); i++){
    		registers[reg][i] = (value.charAt(i));
    	}
    }

    public static void MOV(int reg1, int reg2) {
        // vasiot kod ovde
    	/*System.out.println("MOV");*/
    	for(int i=0 ; i < 16 ; i++){
    		registers[reg1][i] = registers[reg2][i];
    	}
    	
    }

    public static void AND(int reg1, int reg2, int reg3) {
        // vasiot kod ovde
    	/*System.out.println("AND");*/
    	for(int i = 0; i < 16 ; i++){
    		if(registers[reg1][i] == '1' && registers[reg2][i] == '1')
    			registers[reg3][i] = '1';
    		else
    			registers[reg3][i] = '0' ;
    	}
    	
    }

    public static void OR(int reg1, int reg2, int reg3) {
        // vasiot kod ovde
    	/*System.out.println("OR");*/
    	for(int i = 0; i < 16 ; i++){
    		if(registers[reg1][i] == '1' || registers[reg2][i] == '1')
    			registers[reg3][i] = '1';
    		else
    			registers[reg3][i] = '0' ;
    
    	}
    }

    public static void NOT(int reg1, int reg2) {
        // vasiot kod ovde
    	/*System.out.println("NOT");*/
    	for(int i=0 ; i<16 ; i++){
    		registers[reg1][i] = (char) Math.abs(Character.getNumericValue(registers[reg2][i]) - 1 );
    	}
    	
    	
    }

    public static void PRN(int reg) {
        // vasiot kod ovde
    	/*System.out.println("PRN");*/
    	for(int i=0; i<16 ; i++)
    	System.out.print(registers[reg]);
    }

    public static void SUM(int reg1, int reg2, int reg3) {
        // vasiot kod ovde
    	System.out.println("SUM");
    }

    public static void SL(int reg) {
        // vasiot kod ovde
    	/*System.out.println("SL");*/
    	for(int i = 1 ; i < 15 ; i++ ){
    		registers[reg][i] = registers[reg][i+1];
    	}
    	registers[reg][16] = 0;	
    }

    public static void SR(int reg) {
        // vasiot kod ovde
    	/*System.out.println("SR");*/
    	
    	for(int i = 2 ; i < 16 ; i++ ){
    		registers[reg][i] = registers[reg][i - 1] ;
    	}
    	registers[reg][1] = 0 ;
    	
    }

    public static void main(String args[]) throws Exception {
        int i, j, k;

        registers = new char[8][16];
        
        for (i = 0; i < 8; i++) {
            for (j = 0; j < 16; j++) {
                registers[i][j] = '0';
            }
        }
    

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        ArrayList<String> a = new ArrayList<String>();
        while (true) {
            String line = br.readLine();
            if (line.equals("stop")) { //da se vrati na null
                break;
            }
            a.add(line);
        }
      
        

        String lines[] = new String[a.size()];
        Iterator<String> it = a.iterator();
        for (i = 0; i < lines.length; i++) {
            lines[i] = it.next();
        }
        

        // vasiot kod ovde
        for(int p = 0 ; p < lines.length ; p++){
        	/*System.out.println(lines[p]);*/
        	if(lines[p].substring(0, 13).equals("0000000000000")){
        			/*System.out.println("MVI");*/
        		MVI(convert(lines[p].substring(13, 16)), lines[p+1]);
        		i++;
        	}
        	else if(lines[p].substring(0, 10).equals("0000001000")){
        			/*System.out.println("MOV");*/
        		MOV(convert(lines[p].substring(10, 13)),convert(lines[p].substring(13,16)) );
        			
        	}
        	else if(lines[p].substring(0, 7).equals("0000010")){
        			/*System.out.println("AND");*/
        		AND(convert(lines[p].substring(7, 10)),convert(lines[p].substring(10, 13)),convert(lines[p].substring(13, 16)) );
        	}
        	else if(lines[p].substring(0, 7).equals("0000011")){
        		/*	System.out.println("OR");*/
        		OR(convert(lines[p].substring(7, 10)),convert(lines[p].substring(10, 13)),convert(lines[p].substring(13, 16)) );

        	}	
        	else if(lines[p].substring(0, 10).equals("0000100000")){
        			/*System.out.println("NOT");*/
        		NOT(convert(lines[p].substring(10, 13)),convert(lines[p].substring(13,16)));
        	}
        	
        	else if(lines[p].substring(0, 10).equals("0000101000")){
        			/*System.out.println("LESS");*/
        		int temp1 = convert(lines[p].substring(10, 13));
        		int temp2 = convert(lines[p].substring(13, 16));
        			if(CHECK(temp1 ,temp2 ,3)){
        				p = (convert(lines[p+1])); 
        			}
        			else
        				p++;
        	}
        	
        	else if(lines[p].substring(0, 10).equals("0000110000")){
        			/*System.out.println("LEQ");*/
        		int temp1 = convert(lines[p].substring(10, 13));
        		int temp2 = convert(lines[p].substring(13, 16));
        		if(CHECK(temp1,temp2,4)){
        			p =(convert(lines[p+1]));
        		}
        		else
        			p++;
        	
        	}
        	else if(lines[p].substring(0, 10).equals("0000111000")){
        			/*System.out.println("GRE");*/

        		int temp1 = convert(lines[p].substring(10, 13));
        		int temp2 = convert(lines[p].substring(13, 16));
        		if(CHECK(temp1,temp2,1)){
        			p =(convert(lines[p+1]));
        		}
        		else
        			p++;
        	
        	}
        	else if(lines[p].substring(0, 10).equals("0001000000")){
        			/*System.out.println("GEQ");*/

        		int temp1 = convert(lines[p].substring(10, 13));
        		int temp2 = convert(lines[p].substring(13, 16));
        		if(CHECK(temp1,temp2,2)){
        			p =(convert(lines[p+1]));
        		}
        		else
        			p++;
        	
        	}
        	
        	
        	else if(lines[p].substring(0, 16).equals("0001001000000000"))
        			/*System.out.println("JMP");*/
        		p =(convert(lines[p+1]));
        	
        	else if(lines[p].substring(0, 13).equals("0001010000000")){
        			/*System.out.println("PRN");*/
        			PRN(convert(lines[p].substring(13,16)));
        	}
        	
        	else if(lines[p].substring(0, 7).equals("0001011")){
        			/*System.out.println("SUM");*/
        		
        	}
        	//no need
        	else if(lines[p].substring(0, 7).equals("0001100"))
        			System.out.println("SUB");
        	//no need
        	else if(lines[p].substring(0, 10).equals("0001101000"))		
        			System.out.println("PRB");
        	else if(lines[p].substring(0, 13).equals("0001110000000")){
        			/*System.out.println("SL");*/
        		SL(convert(lines[p].substring(13,16)));
        		
        	}
        			
        	else if(lines[p].substring(0, 13).equals("0001111000000"))
        			System.out.println("SR");
        	
        		
        }
        
        
        
        
    }
}
